import streamlit as st
import pandas as pd
import altair as alt
import math
from backend import simulate_retirement_planning


def main():
    st.title("Retirement Savings Simulation")

    st.sidebar.header("Adjust Parameters")

    # User inputs
    initial_age = st.sidebar.slider("Current Age", 20, 70, 30)
    retirement_age = st.sidebar.slider("Retirement Age", initial_age + 1, 80, 65)
    end_age = st.sidebar.slider("Age Until Funds Are Tracked", math.floor(retirement_age/5) * 5 + 5, 120, 90, step = 5)

    initial_savings = st.sidebar.number_input("Initial Savings", value = 20000.0, step = 1000.0)
    monthly_contribution = st.sidebar.number_input("Monthly Deposits Before Retirement", value = 500.0, step = 50.0)
    monthly_spending = st.sidebar.number_input("Monthly Payouts During Retirement", value = 2000.0, step = 100.0)
    annual_return = st.sidebar.slider("Expected Annual Return (%)", 0.0, 15.0, 5.0, step = 0.05)
    st.sidebar.caption("5% is a conservative estimate for a world index.")
    annual_inflation = st.sidebar.slider("Expected Annual Inflation (%)", -2.5, 10.0, 2.25, step = 0.125)
    adjust_for_inflation = st.sidebar.checkbox("Adjust Deposits For Inflation.", value = True)
    #st.sidebar.write("Explanation")
    st.sidebar.caption("Monthly deposits are then updated to match last year's inflation by the beginning of each year.")
    tax_rate = st.sidebar.slider("Expected Tax Rate On Payout (%).", 0.0, 75., 0.0, step = 2.5)

    df = simulate_retirement_planning(initial_age, 
                                    retirement_age, 
                                    end_age, 
                                    monthly_contribution, 
                                    monthly_spending, 
                                    annual_return, 
                                    initial_savings, 
                                    inflation_rate = annual_inflation,
                                    inflation_adjustment = adjust_for_inflation,
                                    tax_rate = tax_rate
                             )

    
    st.subheader("Projected Account Balance Over Time")
    #st.line_chart(df.set_index('Age')['Balance'])
    
    # Split data into positive and negative parts
    df_pos = df[df['Balance'] >= 0].copy()
    df_neg = df[df['Balance'] < 0].copy()

    # Base line chart
    line = alt.Chart(df).mark_line().encode(
        x = alt.X('Age:Q'),
        y = alt.Y('Balance:Q'),
        tooltip=['Age', 'Balance']  
    )

    # Area for positive and negative balances
    charts = [line]
    
    if not df_pos.empty:
        area_pos = alt.Chart(df_pos).mark_area(opacity=0.3, color='green').encode(
            x = 'Age:Q',
            y = 'Balance:Q'
        )
        charts.append(area_pos)
    if not df_neg.empty:    
        area_neg = alt.Chart(df_neg).mark_area(opacity=0.3, color='red').encode(
            x = 'Age:Q',
            y = 'Balance:Q'
        )
        charts.append(area_neg)

    # Composing charts
    chart = alt.layer(*charts).properties(
        width = 700,
        height = 400,
        title = "Retirement Savings Projection (inflation adjusted)"
    )

    st.altair_chart(chart, use_container_width = True, key = "chart_projection")

    st.subheader("Detailed Balance Sheet (inflation ajusted)")
    st.dataframe(df.style.format({"Balance": "{:,.2f}"}))

    if df['Balance'].iloc[-1] < 0:
        st.error("You may run out of money before your desired end age.")
    else:
        st.success("Your funds are likely to suffice through your selected retirement span.")

    st.divider()

    st.subheader("Disclaimer")
    st.markdown("""The financial planning tool provided on this website/application is for *informational and educational purposes only*. It is a general tool designed to help users understand basic financial concepts and explore possible financial outcomes based on user-provided data. The projections and suggestions generated by this tool are **not intended** as, and do not constitute, *financial*, *investment*, *legal*, *tax*, or *other professional advice*.

While we strive to ensure the accuracy and reliability of the tool, we *make no guarantees or warranties*, express or implied, regarding the completeness, accuracy, timeliness, or results obtained from the use of this tool. Financial planning outcomes are inherently uncertain and can be influenced by a wide range of factors beyond our control, including market conditions, interest rates, inflation, and individual financial behavior.

**You are solely responsible for any decisions you make** based on the use of this tool. Before making any financial decisions, you should consult with a qualified financial advisor or other appropriate professional who is aware of your individual circumstances.

By using this tool, you acknowledge and agree that the creators, developers, and distributors of this tool **bear no responsibility or liability** for any losses, damages, or consequences of any kind arising from its use.
""")

    st.divider()
    
    if st.button("Clear Cache"):
        st.cache_data.clear()
        st.rerun()

if __name__ == "__main__":
    main()